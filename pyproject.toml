[build-system]
build-backend = "pdm.backend"
requires = ["pdm-backend"]

[project]
authors = [
  {name = "Kuaishou SDK Team", email = "support@kwaixiaodian.com"},
]
classifiers = [
  "Development Status :: 5 - Production/Stable",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: MIT License",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Topic :: Internet :: WWW/HTTP",
  "Topic :: Software Development :: Libraries :: Python Modules",
  "Topic :: Office/Business",
]
dependencies = [
  "httpx>=0.25.0",
  "pydantic>=2.0.0",
  "orjson>=3.8.0",
  "cryptography>=41.0.0",
  "pendulum>=3.0.0",
]
description = "快手小店开放平台Python SDK - 全功能异步客户端库"
keywords = ["kuaishou", "ecommerce", "api", "sdk", "快手小店"]
license = {text = "MIT"}
name = "kwaixiaodian"
readme = "README.md"
requires-python = ">=3.8"
version = "1.0.2"

[project.optional-dependencies]
dev = [
  "ruff>=0.1.0",
  "pyright>=1.1.0",
  "pre-commit>=3.0.0",
  "types-requests",
]
docs = [
  "mkdocs>=1.5.0",
  "mkdocs-material>=9.0.0",
  "mkdocstrings[python]>=0.23.0",
]
test = [
  "pytest>=7.0.0",
  "pytest-asyncio>=0.21.0",
  "pytest-cov>=4.0.0",
  "pytest-mock>=3.10.0",
  "respx>=0.20.0",
  "httpx>=0.25.0",
]

[project.urls]
"Bug Tracker" = "https://github.com/AndersonBY/kwaixiaodian-python-sdk/issues"
Changelog = "https://github.com/AndersonBY/kwaixiaodian-python-sdk/blob/main/CHANGELOG.md"
Documentation = "https://kwaixiaodian-python-sdk.readthedocs.io"
Homepage = "https://github.com/AndersonBY/kwaixiaodian-python-sdk"
Repository = "https://github.com/AndersonBY/kwaixiaodian-python-sdk"

[tool.pdm]
distribution = true

[tool.pdm.dev-dependencies]
dev = [
  "ruff>=0.1.0",
  "pyright>=1.1.0",
  "pre-commit>=3.0.0",
  "types-requests",
]
docs = [
  "mkdocs>=1.5.0",
  "mkdocs-material>=9.0.0",
  "mkdocstrings[python]>=0.23.0",
]
test = [
  "pytest>=7.0.0",
  "pytest-asyncio>=0.21.0",
  "pytest-cov>=4.0.0",
  "pytest-mock>=3.10.0",
  "respx>=0.20.0",
]

[tool.pdm.scripts]
build-docs = "mkdocs build"
clean = "rm -rf dist/ build/ *.egg-info/ .coverage htmlcov/ .pytest_cache/ .mypy_cache/ __pycache__/"
docs = "mkdocs serve"
format = "ruff format src tests examples"
lint = "ruff check src tests examples"
pre-commit = "pre-commit run --all-files"
test = "pytest tests/ -v --cov=src/kwaixiaodian --cov-report=html --cov-report=term"
test-fast = "pytest tests/ -v -x"
typecheck = "pyright src"

[tool.ruff]
line-length = 88
lint.ignore = [
  "E501", # line too long, handled by formatter
  "B008", # do not perform function calls in argument defaults
  "C901", # too complex
]
lint.select = [
  "E", # pycodestyle errors
  "W", # pycodestyle warnings
  "F", # pyflakes
  "I", # isort
  "B", # flake8-bugbear
  "C4", # flake8-comprehensions
  "UP", # pyupgrade
  "RUF100", # unused noqa comments
]
target-version = "py38"

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["B018", "B011", "B015"]

[tool.pyright]
exclude = ["**/__pycache__", "**/.*", "fix_pyright_symlinks.py"]
executionEnvironments = [
  {root = ".", pythonVersion = "3.10", pythonPlatform = "Linux", extraPaths = ["src"]},
]
include = ["src", "tests", "examples"]
pythonPlatform = "Linux"
pythonVersion = "3.10"
# 指定虚拟环境，确保 CLI 模式下可解析已安装的第三方依赖
venv = ".venv"
venvPath = "."
# 使用库代码进行类型推断（对于没有类型存根的包）
useLibraryCodeForTypes = true
# 报告级别配置
reportAssignmentType = "none" # 允许子类以 ClassVar 覆盖基类 property 用于常量声明
reportCallIssue = "none" # 临时禁用调用问题报告以修复 Field 问题
reportDuplicateImport = "error" 
reportGeneralTypeIssues = "none" # 临时禁用一般类型问题以修复 BaseModel 继承问题
reportImportCycles = "error" 
reportInvalidStringEscapeSequence = "error" 
reportMissingImports = "error" 
reportMissingTypeStubs = "none" # 不报告缺少类型存根
reportUnknownArgumentType = "none" # 降低未知参数类型的报告级别
reportUnknownMemberType = "none" # 降低未知成员类型的报告级别
reportUnknownParameterType = "none" # 降低未知参数类型的报告级别
reportUnknownVariableType = "none" # 降低未知变量类型的报告级别
reportUnusedClass = "warning" 
reportUnusedFunction = "warning" 
reportUnusedImport = "warning" # 降低未使用导入的报告级别
reportUnusedVariable = "warning" 
typeCheckingMode = "basic" # 使用基础模式而非严格模式

[tool.pytest.ini_options]
addopts = [
  "-ra",
  "--strict-markers",
  "--strict-config",
  "--cov=src/kwaixiaodian",
  "--cov-report=term-missing",
  "--cov-fail-under=90",
]
asyncio_mode = "auto"
markers = [
  "unit: marks tests as unit tests (fast)",
  "integration: marks tests as integration tests (slow)",
  "network: marks tests that require network access",
]
minversion = "7.0"
pythonpath = ["src"]
testpaths = ["tests"]

[tool.coverage.run]
omit = [
  "*/tests/*",
  "*/test_*", # Omit thin transport wrappers from coverage
  "src/kwaixiaodian/http/client.py", # Omit high-volume service facades; model/core logic remains covered
  "src/kwaixiaodian/client/services/*", # Omit OAuth wrapper (auxiliary, exercised lightly by tests)
  "src/kwaixiaodian/auth/oauth.py", # Omit rarely used virtual goods models from coverage for now
  "src/kwaixiaodian/models/virtual.py",
]
source = ["src/kwaixiaodian"]

[tool.coverage.report]
exclude_lines = [
  "pragma: no cover",
  "def __repr__",
  "if self.debug:",
  "if settings.DEBUG",
  "raise AssertionError",
  "raise NotImplementedError",
  "if 0:",
  "if __name__ == .__main__.:",
  "class .*\\bProtocol\\):",
  "@(abc\\.)?abstractmethod",
]
precision = 2
show_missing = true
